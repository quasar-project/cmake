# Correctly find and set CMAKE_THREAD_PREFER_PTHREAD and THREADS_PREFER_PTHREAD_FLAG flags.
# Usage: find_threads()
macro(find_threads)
  message(STATUS "[${PROJECT_NAME}] looking for threads...")
  find_package(Threads REQUIRED)

  if(Threads_FOUND)
    set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
    set(THREADS_PREFER_PTHREAD_FLAG TRUE)
    message(STATUS "[${PROJECT_NAME}] looking for threads... OK!")
  else()
    message(FATAL_ERROR "[${PROJECT_NAME}] looking for threads... FAILURE")
  endif()
endmacro()

# Set win32 winnt version for target.
# Usage: target_set_win32_winnt_version(<target>)
# @see https://stackoverflow.com/a/40217291/1746503
macro(target_set_win32_winnt_version __TARGET)
  if(WIN32)
    macro(get_win32_winnt version)
      if(CMAKE_SYSTEM_VERSION)
        set(ver ${CMAKE_SYSTEM_VERSION})
        string(REGEX MATCH "^([0-9]+).([0-9])" ver ${ver})
        string(REGEX MATCH "^([0-9]+)" verMajor ${ver})
        if("${verMajor}" MATCHES "10")
          set(verMajor "A")
          string(REGEX REPLACE "^([0-9]+)" ${verMajor} ver ${ver})
        endif("${verMajor}" MATCHES "10")
        string(REPLACE "." "" ver ${ver})
        string(REGEX REPLACE "([0-9A-Z])" "0\\1" ver ${ver})
        set(${version} "0x${ver}")
      endif()
    endmacro()

    if(NOT DEFINED _WIN32_WINNT)
      get_win32_winnt(ver)
      if("${ver}" STREQUAL "")
        message(STATUS "[${PROJECT_NAME}] set _WIN32_WINNT=0x0A00 (FORCE)")
        set(ver "0x0A00")
      endif()
      set(_WIN32_WINNT ${ver})
    endif()

    message(STATUS "[${PROJECT_NAME}] set _WIN32_WINNET=${_WIN32_WINNT} (implicitly)")

    target_compile_definitions(${__TARGET} INTERFACE _WIN32_WINNT=${_WIN32_WINNT} WIN32_LEAN_AND_MEAN)
  endif()
endmacro()